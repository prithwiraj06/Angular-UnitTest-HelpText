import { TestBed } from '@angular/core/testing';
import { HttpTestingController, HttpClientTestingModule } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { ManageUserService } from './manage-user.service';
import { Role } from '../../models/role';
import { User } from '../../models/user.model';
import { Group } from '../../models/group.model';
import { Status } from '../../models/status.model';
describe('ManageUserService', () => {
  let manageUserService: ManageUserService;
  let httpTestingController: HttpTestingController;

  beforeEach(() => {
    TestBed.configureTestingModule({
      imports: [
        HttpClientTestingModule,
        RouterTestingModule
      ],
      providers: [ManageUserService]
    });
    manageUserService = TestBed.get(ManageUserService);
    httpTestingController = TestBed.get(HttpTestingController);
  });

  it('should be created', () => {
    expect(manageUserService).toBeTruthy();
  });

  it('should call getAllStatus() function and should return status array', () => {
    let responseData: Status[] = [
      { statusName: 'Active' },
      { statusName: 'Inactive' },
      { statusName: 'Locked' }
    ];
    let data = manageUserService.getAllStatus();
    expect(data).toEqual(responseData);
  });

  it('should call getAllRoles() function and should return roles array', () => {
    let responseData: Role[] = [
      {
        id: 1,
        orgId: 1,
        name: 'Manager',
        display_Name: 'Manager',
        displayName: 'Manager',
        description: 'Manager',
        is_Deletable: null,
        permissionId: 1,
        permissionCount: 1,
        assignedCount: 0,
        updatedOn: null,
        lastUpdated: '',
        roleType: '',
        isExpanded: null,
        permissions: [],
        assigned: []
      }
    ];
    manageUserService.getAllRoles().subscribe(result => {
      expect(result).toBe(responseData);
      serviceCall.flush(responseData);
    });
    const serviceCall = httpTestingController.expectOne(req => req.method === 'GET' && req.url === `Organization/1/roles`);
    httpTestingController.verify();
    expect(serviceCall.request.method).toBe('GET');
    expect(serviceCall.request.url).toBe('Organization/1/roles');
    
  });

  it('should call getAllGroups() function and should return groups array', () => {
    let responseData: Group[] = [
      {
        id: 1,
        orgId: 1,
        name: 'Group A',
        description: 'Group A'
      }
    ];

    manageUserService.getAllGroups().subscribe(result => {
      expect(result).toBe(responseData);
      serviceCall.flush(responseData);
    });
    
    const serviceCall = httpTestingController.expectOne(req => req.method === 'GET' && req.url === `Organization/1/groups`);
    httpTestingController.verify();
    expect(serviceCall.request.method).toBe('GET');
    expect(serviceCall.request.url).toBe('Organization/1/groups');

  });

  it('should call getAllColumnNames() function and should return userGridColumnName array', () => {
    let responseData = [
      { field: 'firstName', header: 'First Name' },
      { field: 'lastName', header: 'Last Name' },
      { field: 'username', header: 'Username' },
      { field: 'email', header: 'Email' },
      { field: 'phoneNumber', header: 'Phone' },
      { field: 'groupName', header: 'Group' },
      { field: 'roleName', header: 'Roles' },
      { field: 'status', header: 'Status' },
      { field: 'lastLoginOn', header: 'Last Logon' }
    ];
    let data = manageUserService.getAllUserGridColumnNames();
    expect(data).toEqual(responseData);
  }); 

  it('should call getAllUserData() function and should retrun users array', () => {
    let responseData: User[] = [
      {
        id: 1,
        username: 'fakeName',
        firstName: 'fakeFirstName',
        lastName: 'fakeLastName',
        email: 'fakeEmail',
        phoneNumber: 'fakePhone',
        phoneExt: 'fakeExt',
        jobTitle: 'fakeJobtitle',
        startDate: new Date('11/11/2018'),
        endDate: new Date('11/112018'),
        isLocked: false,
        isActivated: true,
        failedAttemptCount: 0,
        orgId: null,
        securityAnswers: null,
        passwordFailureCount: null,
        groupId: null,
        groupName: '',
        roleIds: 101,
        userRoles: [
          {
            id: 101,
            orgId: 1,
            name: 'fakeName',
            display_Name: 'faksDisplayName',
            displayName: 'fakeDisplayName',
            description: 'fakeDiscription',
            is_Deletable: false,
            permissionId: 1,
            permissionCount: 1,
            assignedCount: 1,
            updatedOn: new Date('11/11/2018'),
            lastUpdated: '11/11/2018',
            roleType: 'fakeoleType',
            isExpanded: false
          }
        ],
        roleName: null,
        rolesCount: null,
        lastLoginOn: '11/11/2018',
        status: '',
      }
    ]

    manageUserService.getAllUserData().subscribe(result => {
      expect(result).toBe(responseData);
      serviceCall.flush(responseData);
    });

    const serviceCall = httpTestingController.expectOne(req => req.method === 'GET' && req.url === `Organization/1/users`);
    httpTestingController.verify();
    expect(serviceCall.request.method).toBe('GET');
    expect(serviceCall.request.url).toBe('Organization/1/users')
  });

});


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



import { OperationalMetricsService } from "./operational-metrics.service";
import { async, TestBed } from "@angular/core/testing";
import { HttpClientTestingModule, HttpTestingController } from "@angular/common/http/testing";
import { OperationalMetrics } from "../../../models/operational-metrics.model";

describe('OperationalMetricsService', () => {
  let operationMetricsService: OperationalMetricsService;
  let httpTestingController: HttpTestingController;

  beforeEach(async(() => {
    TestBed.configureTestingModule({
      providers: [OperationalMetricsService],
      imports: [
        HttpClientTestingModule
      ]
    }).compileComponents().then(() => {
      operationMetricsService = TestBed.get(OperationalMetricsService);
      httpTestingController = TestBed.get(HttpTestingController);
    })
  }));

  it('should be created', () => {
    expect(operationMetricsService).toBeTruthy();
  });

  it('should get all operational metrics data when getOperationalMetrics() function is called', () => {
    let responseData: OperationalMetrics[] = [
      { category: 'CHASE', completeCount: 123, totalCount: 1122 }
    ];
    operationMetricsService.getOperationalMetrics().subscribe(result => {
      expect(result).toBe(responseData);
      serviceCall.flush(responseData);      
    });
    const serviceCall = httpTestingController.expectOne(req => req.method === 'GET' && req.url === `Dashboard/operationalMetrics`);
    httpTestingController.verify();
    expect(serviceCall.request.method).toBe('GET');
    expect(serviceCall.request.url).toBe('Dashboard/operationalMetrics');
  });
});

---------------------------------------------------------------------------------------------------------------------------------------

import { TestBed, async } from '@angular/core/testing';

import { QualityTimelineService } from './quality-timeline.service';
import { HttpTestingController, HttpClientTestingModule } from '@angular/common/http/testing';
import { RouterTestingModule } from '@angular/router/testing';
import { Milestone } from '../../models/milestone';

describe('QualityTimelineService', () => {
  let qualityTimelineService: QualityTimelineService;
  let httpTestingController: HttpTestingController;
  let httpMock: HttpTestingController;

  beforeEach(async(() =>
    TestBed.configureTestingModule({
      imports: [
        HttpClientTestingModule,
        RouterTestingModule
      ],
      providers: [QualityTimelineService]
    }).compileComponents().then(() => {
      qualityTimelineService = TestBed.get(QualityTimelineService);
      httpTestingController = TestBed.get(HttpTestingController);
      httpMock = TestBed.get(HttpTestingController);
    })));

  afterEach(() => {
    httpMock.verify();
  });

  it('should be created', () => {
    const service: QualityTimelineService = TestBed.get(QualityTimelineService);
    expect(service).toBeTruthy();
  });

  it('should call getMilestones() function and should retrun milestones array', () => {
    let milestones: Milestone[] = [
      {
        id: 1,
        date: new Date('2091/10/11'),
        name: 'Test Run',
        isClient: false,
        createdBy: 1,
        displayType: 1,
        isPresent: true,
        isHidden: false,
        isRepeat: false,
        isToday: false,
        orgId: 1,
        updatedBy: 1,
        completedDate: null
      }];
    let orgId = 1;
    let hedisYear = '2019';
    qualityTimelineService.getMilestones(orgId, hedisYear).subscribe(result => {
      expect(result).toBe(milestones);
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'GET' && req.url === `/Milestones?orgId=` + orgId + `&hedisYear=` + hedisYear);
    httpTestingController.verify();
    expect(service.request.method).toBe('GET');
    expect(service.request.url).toEqual(`/Milestones?orgId=` + orgId + `&hedisYear=` + hedisYear);
  });

  it('should call createMilestone() function', () => {
    let milestone =
    {
      id: 1,
      date: new Date('2091/10/11'),
      name: 'Test Run',
      isClient: false,
      createdBy: 1,
      displayType: 1,
      isPresent: true,
      isHidden: false,
      isRepeat: false,
      isToday: false,
      orgId: 1,
      updatedBy: 1,
      completedDate: null
    };
    qualityTimelineService.createMilestone(milestone).subscribe(result => {      
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'POST' && req.url === `/Milestones`);
    httpTestingController.verify();
    expect(service.request.method).toBe('POST');
    expect(service.request.url).toEqual(`/Milestones`);
  });

  it('should call updateMilestone() function', () => {
    let milestone =
    {
      id: 1,
      date: new Date('2091/10/11'),
      name: 'Test Run',
      isClient: false,
      createdBy: 1,
      displayType: 1,
      isPresent: true,
      isHidden: false,
      isRepeat: false,
      isToday: false,
      orgId: 1,
      updatedBy: 1,
      completedDate: null
    };
    qualityTimelineService.updateMilestone(milestone).subscribe(result => {
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'PUT' && req.url === `/Milestones/` + milestone.id);
    httpTestingController.verify();
    expect(service.request.method).toBe('PUT');
    expect(service.request.url).toEqual(`/Milestones/` + milestone.id);
  });

  it('should call deleteMilestone() function', () => {
    let id = 1;
    qualityTimelineService.deleteMilestone(id).subscribe(result => {
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'DELETE' && req.url === `/Milestones/` + id);
    httpTestingController.verify();
    expect(service.request.method).toBe('DELETE');
    expect(service.request.url).toEqual(`/Milestones/` + id);
  });

  it('should call completeMilestone() function', () => {
    let orgId = 1;
    let milestone =
    {
      id: 1,
      date: new Date('2091/10/11'),
      name: 'Test Run',
      isClient: false,
      createdBy: 1,
      displayType: 1,
      isPresent: true,
      isHidden: false,
      isRepeat: false,
      isToday: false,
      orgId: 1,
      updatedBy: 1,
      completedDate: null
    };
    qualityTimelineService.completeMilestone(orgId, milestone).subscribe(result => {
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'PUT' && req.url === `/Milestones/Complete?orgId=` + orgId);
    httpTestingController.verify();
    expect(service.request.method).toBe('PUT');
    expect(service.request.url).toEqual(`/Milestones/Complete?orgId=` + orgId);
  });

  it('should call hideshowMilestone() function', () => {
    let orgId = 1;
    let milestone =
    {
      id: 1,
      date: new Date('2091/10/11'),
      name: 'Test Run',
      isClient: false,
      createdBy: 1,
      displayType: 1,
      isPresent: true,
      isHidden: false,
      isRepeat: false,
      isToday: false,
      orgId: 1,
      updatedBy: 1,
      completedDate: null
    };
    qualityTimelineService.hideshowMilestone(orgId, milestone).subscribe(result => {
      service.flush(result);
    });
    const service = httpTestingController.expectOne(req => req.method === 'PUT' && req.url === `/Milestones/Hideshow?orgId=` + orgId);
    httpTestingController.verify();
    expect(service.request.method).toBe('PUT');
    expect(service.request.url).toEqual(`/Milestones/Hideshow?orgId=` + orgId);
  });
});


